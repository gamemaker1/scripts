#!/bin/bash

## NEWPROJ
## -------

# Create a project based on a given template

## CREDITS
# ASCII art using the figlet CLI from AUR (https://aur.archlinux.org/packages/figlet) and the pagga font from the figlet-fonts-extra package from AUR (https://aur.archlinux.org/packages/figlet-fonts-extra_)

## DEPENDENCIES
# none so far

## PREFLIGHT
# Unalias everything to prevent weirdness
unalias -a
# Fail and exit when the first error occurs
set -e
# Enable globs
shopt -s nullglob
# For debbuging
#set -xv

## PRINTING MESSAGES
# Print text
function print {
	echo -e "$*"
}
# Print title text
function print_title {
	echo -e "\e[1;32m$*\e[0m"
}
# Print bold text
function print_bold {
	echo -e "\e[1;33m$*\e[0m"
}
# Print success text
function print_success {
	echo -e "\e[1;32m==>\e[0m \e[1m$*\e[0m"
}
# Print progress/info text
function print_info {
	echo -e "\e[1;34m==>\e[0m \e[1m$*\e[0m"
}
# Print starting a stage/process
function print_stage {
	echo -e "\e[1;35m==> $*\e[0m"
}
# Print warning text
function print_warning {
	echo -e "\e[0;33mWARN $*\e[0m"
}
# Print error text
function print_error {
	echo -e "\e[1;31mERR $*\e[0m"
}

## UTILITY
# Join elements of an array (taken from SO - https://stackoverflow.com/a/17841619; thank you to the answerer)
function join_by {
	local d=${1-} f=${2-}
	if shift 2; then
		printf %s "$f" "${@/#/$d}"
	fi
}
# Ask for confirmation
function ask_confirmation {
	# Ask a yes/no question
	read -p $'\e[1;33m ==> '$"$1"$'\e[0m [\e[1;32my\e[0m/\e[1;31mN\e[0m] ' -r
	# Return 0 if yes and 127 if no
	if [[ $REPLY =~ ^[Yy]$ ]]; then
		return 0
	else
		return 127
	fi
}
# Ask a question
function ask_question {
	# Ask a question
	read -p $'\e[1;33m ==> '$"$1"$' ' -r
	# Return the reply
	echo $REPLY
}

## VARS
# Config dir
CONFIG_DIR="${XDG_CONFIG_HOME:-$HOME}/.config/newproj"
# Templates dir
TEMPLATES_DIR="$CONFIG_DIR/templates"

## UI
# Print the logo
function print_logo {
	# figlet -f pagga 'NEWPROJ'
	print ""
	print_bold "░░░░░░░░░░░░░░░░░░░░░░░░░░░░░"
	print_bold "░█▀█░█▀▀░█░█░█▀█░█▀▄░█▀█░▀▀█░"
	print_bold "░█░█░█▀▀░█▄█░█▀▀░█▀▄░█░█░░░█░"
	print_bold "░▀░▀░▀▀▀░▀░▀░▀░░░▀░▀░▀▀▀░▀▀░░"
	print_bold "░░░░░░░░░░░░░░░░░░░░░░░░░░░░░"
	print ""
}

## OPERATIONS

## MAIN
# Print the logo
print_logo

# The user may pass the project name, template and parent directory as parameters
project_name="$1"
template="$2"
parent_dir="$3"

# Check if the template exists
if [[ -z "$template" ]]; then
	template=$(ask_question "Enter template name:")
fi
print_info "Using template $template"
# Check if a template exists for it
print_info "Searching for $template template in $TEMPLATES_DIR..."
if ! [[ -f "$TEMPLATES_DIR/$template.template" ]]; then
	# If not, error out
	print_error "Could not find template for $template in $TEMPLATES_DIR!"
	exit 1
fi
print_success "Found template for $template!"

# Get the project name if it was not passed as an argument
if [[ -z "$project_name" ]]; then
	project_name=$(ask_question "Enter the name of the project:")
fi

# Get the parent directory if it was not passed as an argument
if [[ -z "$parent_dir" ]]; then
	parent_dir=$(ask_question "Enter path to parent directory:")
fi

print_info "Setting up project $project_name (in directory: $parent_dir)..."

# Run the script for that template
"$TEMPLATES_DIR/$template.template" "$project_name" "$parent_dir"

# Done!
print_success "Done!"

# EOF