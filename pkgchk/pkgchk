#!/bin/bash

## BUMP PKGBUILD VERSION
## ---------------------

# Script to bump the version of a package and update its checksums accordingly

## CREDITS
# ASCII art using the figlet CLI from AUR (https://aur.archlinux.org/packages/figlet) and the pagga font from the figlet-fonts-extra package from AUR (https://aur.archlinux.org/packages/figlet-fonts-extra_)

## DEPENDENCIES
# - git
# - pacman
# - updpkgsums
# - namcap
# - makepkg

## PREFLIGHT
# Unalias everything to prevent weirdness
unalias -a
# Fail and exit when the first error occurs
set -e
# Enable globs
shopt -s nullglob
# For debbuging
#set -xv

## PRINTING MESSAGES
# Print text
function print {
	echo -e "$*"
}
# Print title text
function print_title {
	echo -e "\e[1;32m$*\e[0m"
}
# Print bold text
function print_bold {
	echo -e "\e[1;33m$*\e[0m"
}
# Print success text
function print_success {
	echo -e "\e[1;32m==>\e[0m \e[1m$*\e[0m"
}
# Print progress/info text
function print_info {
	echo -e "\e[1;34m==>\e[0m \e[1m$*\e[0m"
}
# Print starting a stage/process
function print_stage {
	echo -e "\e[1;35m==> $*\e[0m"
}
# Print warning text
function print_warning {
	echo -e "\e[0;33mWARN $*\e[0m"
}
# Print error text
function print_error {
	echo -e "\e[1;31mERR $*\e[0m"
}

## UTILITY
# Join elements of an array (taken from SO - https://stackoverflow.com/a/17841619; thank you to the answerer)
function join_by {
	local d=${1-} f=${2-}
	if shift 2; then
		printf %s "$f" "${@/#/$d}"
	fi
}
# Ask for confirmation
function ask_confirmation {
	# Ask a yes/no question
	read -p $'\e[1;33m ==> '$"$1"$'\e[0m [\e[1;32my\e[0m/\e[1;31mN\e[0m] ' -r
	# Return 0 if yes and 127 if no
	if [[ $REPLY =~ ^[Yy]$ ]]; then
		return 0
	else
		return 127
	fi
}

## CONFIG
# Set environment variables
[[ -z "$PKGBUILD_PATH" ]] && export PKGBUILD_PATH=./PKGBUILD
[[ -z "$SRCINFO_PATH" ]] && export SRCINFO_PATH=./.SRCINFO
[[ -z "$INSTALL_HOOKS_PATH" ]] && [[ -f "./*.install" ]] && export INSTALL_HOOKS_PATH=./*.install
[[ -z "$LICENSE_PATH" ]] && [[ -f "./LICENSE" ]] && export LICENSE_PATH=./LICENSE

[[ -z "$TEMP_DIR" ]] && mkdir -p "$HOME/.cache/pkgchk/" && export TEMP_DIR=$HOME/.cache/pkgchk/

[[ -z "$GIT_MESSAGE" ]] && export GIT_MESSAGE="$1"
[[ -z "$GIT_FILES" ]] && export GIT_FILES="$PKGBUILD_PATH $SRCINFO_PATH $INSTALL_HOOKS_PATH $LICENSE_PATH"

# Source the PKGBUILD so we can access its fields
source "$PKGBUILD_PATH"

## UI
# Print the logo
function print_logo {
	# figlet -f pagga 'PKGCHK'
	print ""
	print_bold "░░░░░░░░░░░░░░░░░░░░░░░░░"
	print_bold "░█▀█░█░█░█▀▀░█▀▀░█░█░█░█░"
	print_bold "░█▀▀░█▀▄░█░█░█░░░█▀█░█▀▄░"
	print_bold "░▀░░░▀░▀░▀▀▀░▀▀▀░▀░▀░▀░▀░"
	print_bold "░░░░░░░░░░░░░░░░░░░░░░░░░"
	print ""
}

## OPERATIONS
# Print help
function print_help {
	print_logo
	print_title "USAGE: $0 [options] <new version> [new pkgrel]"
	print_bold ""
	print_bold "Options:"
	print "	-h, --help                              Print help"
}
# Update the version in the PKGBUILD file
function bump_version {
	print_stage "Bump version"
	if [[ -z "$1" ]]; then
		print_warning "No new version specified, skipping!"
	else
		print_info "Updating version to $1"
		new_version="$1"
		# Replace it with the new version
		sed -i "s/pkgver=.*/pkgver=$new_version/g" "$PKGBUILD_PATH"
		print_success "Successfully updated version to $1"
		# Source the pkgbuild again
		source "$PKGBUILD_PATH"
		return 0
	fi
}
# Update the pkgrel next (if needed)
function bump_pkgrel {
	print_stage "Bump PKGREL"
	if [[ -z "$2" ]]; then
		print_warning "No PKGREL specified, skipping!"
	else
		print_info "Updating PKGREL to $2"
		new_rel="$2"
		# Replace the old pkgrel with the new pkgrel
		sed -i "s/pkgrel=.*/pkgrel=$new_rel/g" "$PKGBUILD_PATH"
		# Source the pkgbuild again
		source "$PKGBUILD_PATH"
	fi
}
# Update checsums of all files in the source array in the PKGBUILD
function update_checksums {
	print_stage "Update checksums"
	# Now download the sources and get their SHA256SUMS
	print_info "Retrieving sources and generating SHA256 checksums..."
	# Run updpkgsums
	updpkgsums "$PKGBUILD_PATH"
	# Success!
	print_success "Updated checksums succesfully!"
	# Source the pkgbuild again
	source "$PKGBUILD_PATH"
}
# Update the .SRCINFO file
function update_srcinfo {
	print_stage "Update .SRCINFO"
	print_info "Updating .SRCINFO..."
	makepkg --printsrcinfo > "$SRCINFO_PATH"
	print_success "Updated .SRCINFO succesfully!"
}
# Run checks on the edited files
function run_checks {
	# Run checks
	# - `makepkg` should exit succesfully
	# - `namcap` should pass
	print_stage "Run checks (namcap, makepkg)"
	# Run makepkg
	print_info "Running makepkg..."
	BUILDDIR="$TEMP_DIR" makepkg -fp "$PKGBUILD_PATH"
	print_success "makepkg successful!"
	# Run namcap
	print_info "Running namcap..."
	# Run it on the PKGBUILD and the resulting pkg.tar.zst file
	namcap_output=$(namcap "$PKGBUILD_PATH")
	if ! [[ -z $namcap_output ]]; then
		print_error "namcap check failed: $namcap_output"
		exit 2
	fi
	namcap_output=$(namcap *.pkg.tar.zst)
	if ! [[ -z $namcap_output ]]; then
		print_error "namcap check failed: $namcap_output"
		exit 2
	fi
	
}
# Push it to AUR
function push_to_aur {
	# Pushing to AUR
	print_stage "Push to AUR"
	# Run git add, commit, push
	print_info "Files to commit: $GIT_FILES"
	print_info "Commit message: $GIT_MESSAGE"
	# Ask for confirmation
	if ask_confirmation "Push to AUR?" ; then
		print_info "Pushing files..."
		git add $GIT_FILES
		git commit -m "$GIT_MESSAGE"
		git push
		# We're done!
		print_success "Succesfully updated package!"
	else
		print_error "Aborting push; cancelled by user"
		return 127
	fi
}

## MAIN
## OPTION PARSING
# We only need to check if there is a -h so we print help; else we bump the package version
while getopts ":h" option; do
	case $option in
		h) print_help; exit $?;;
	esac
done

# Bump version and pkgrel in PKGBUILD
bump_version $1
bump_pkgrel $2
# Update checksums
update_checksums
# Update the .SRCINFO file
update_srcinfo
# Run checks
run_checks
# Push to AUR
push_to_aur

# EOF
