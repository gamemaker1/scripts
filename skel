#!/bin/bash

## SKELETION SCRIPT
## ----------------

# Skeleton for a script

## CREDITS
# ASCII art using the figlet CLI from AUR (https://aur.archlinux.org/packages/figlet) and the pagga font from the figlet-fonts-extra package from AUR (https://aur.archlinux.org/packages/figlet-fonts-extra_)

## DEPENDENCIES
# package names

## PREFLIGHT
# Unalias everything to prevent weirdness
unalias -a
# Fail and exit when the first error occurs
set -e
# Enable globs
shopt -s nullglob
# For debbuging
#set -xv

## PRINTING MESSAGES
# Print text
function print {
	echo -e "$*"
}
# Print title text
function print_title {
	echo -e "\e[1;32m$*\e[0m"
}
# Print bold text
function print_bold {
	echo -e "\e[1;33m$*\e[0m"
}
# Print success text
function print_success {
	echo -e "\e[1;32m==>\e[0m \e[1m$*\e[0m"
}
# Print progress/info text
function print_info {
	echo -e "\e[1;34m==>\e[0m \e[1m$*\e[0m"
}
# Print starting a stage/process
function print_stage {
	echo -e "\e[1;35m==> $*\e[0m"
}
# Print warning text
function print_warning {
	echo -e "\e[0;33mWARN $*\e[0m"
}
# Print error text
function print_error {
	echo -e "\e[1;31mERR $*\e[0m"
}

## UTILITY
# Join elements of an array (taken from SO - https://stackoverflow.com/a/17841619; thank you to the answerer)
function join_by {
	local d=${1-} f=${2-}
	if shift 2; then
		printf %s "$f" "${@/#/$d}"
	fi
}
# Ask for confirmation
function ask_confirmation {
	# Ask a yes/no question
	read -p $'\e[1;33m ==> '$"$1"$'\e[0m [\e[1;32my\e[0m/\e[1;31mN\e[0m] ' -r
	# Return 0 if yes and 127 if no
	if [[ $REPLY =~ ^[Yy]$ ]]; then
		return 0
	else
		return 127
	fi
}

## CONFIG
# Set environment variables
[[ -z "$ALLOW_TEAPOT" ]] && export ALLOW_TEAPOT=true

## UI
# Print the logo
function print_logo {
	# figlet -f pagga 'SKEL'
	print ""
	print_bold "░░░░░░░░░░░░░░░░░"
	print_bold "░█▀▀░█░█░█▀▀░█░░░"
	print_bold "░▀▀█░█▀▄░█▀▀░█░░░"
	print_bold "░▀▀▀░▀░▀░▀▀▀░▀▀▀░"
	print_bold "░░░░░░░░░░░░░░░░░"
	print ""
}
# Print a teapot
function print_teapot {
	# figlet -f pagga "I'M A TEAPOT"
	print ""
	print_bold "░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░"
	print_bold "░▀█▀░▀░█▄█░░░█▀█░░░▀█▀░█▀▀░█▀█░█▀█░█▀█░▀█▀░"
	print_bold "░░█░░░░█░█░░░█▀█░░░░█░░█▀▀░█▀█░█▀▀░█░█░░█░░"
	print_bold "░▀▀▀░░░▀░▀░░░▀░▀░░░░▀░░▀▀▀░▀░▀░▀░░░▀▀▀░░▀░░"
	print_bold "░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░"
	print ""
}

## OPERATIONS
# Print help
function print_help {
	print_logo
	print_title "USAGE: $0 <options> [arguments]"
	print_bold ""
	print_bold "Options:"
	print "	-h, --help                              Print help"
	print "	-t, --teapot <number of cups to pour>   I'm a teapot"
}
# Pour some cups
function pour_cups {
	print_teapot
	if [[ "$1" -lt 1 ]] || [[ -z "$1" ]] || [[ "$ALLOW_TEAPOT" == "false" ]]; then
		print_error "Pouring out NO cups :("
		return 1
	else
		print_info "Pouring out $1 cups of whatever you want! Enjoy :D"
		return 0
	fi
}

## MAIN
## OPTION PARSING
while getopts ":ht:" option; do
	case $option in
		h) print_help; exit $?;;
		t) pour_cups $OPTARG; exit $?;;
		?) print_error "Invalid usage; use $0 -h to print help"; exit 1;;
	esac
done

# EOF